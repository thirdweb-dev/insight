# Example configuration for readonly ClickHouse API endpoints
# This configuration allows you to use a separate readonly ClickHouse instance
# for user-facing API queries while keeping the main orchestration flow unchanged

storage:
  main:
    clickhouse:
      # Main ClickHouse configuration (for orchestration)
      host: "localhost"
      port: 9000
      username: "default"
      password: "password"
      database: "insight"
      
      # Readonly ClickHouse configuration (for API endpoints)
      # These environment variables will override the main config for API queries
      readonlyHost: "${CLICKHOUSE_HOST_READONLY}"      # e.g., "readonly-clickhouse.example.com"
      readonlyPort: "${CLICKHOUSE_PORT_READONLY}"      # e.g., 9000
      readonlyUsername: "${CLICKHOUSE_USER_READONLY}"  # e.g., "readonly_user"
      readonlyPassword: "${CLICKHOUSE_PASSWORD_READONLY}" # e.g., "readonly_password"
      readonlyDatabase: "${CLICKHOUSE_DATABASE_READONLY}" # e.g., "insight_readonly"
      
      # Other ClickHouse settings
      disableTLS: false
      maxOpenConns: 100
      maxIdleConns: 10
      maxRowsPerInsert: 100000
      enableParallelViewProcessing: true
      maxQueryTime: 300

# Environment variables to set:
# CLICKHOUSE_HOST_READONLY=readonly-clickhouse.example.com
# CLICKHOUSE_PORT_READONLY=9000
# CLICKHOUSE_USER_READONLY=readonly_user
# CLICKHOUSE_PASSWORD_READONLY=readonly_password
# CLICKHOUSE_DATABASE_READONLY=insight_readonly

# How it works:
# 1. When readonly environment variables are set, API endpoints will use the readonly ClickHouse instance
# 2. The orchestration flow (indexer, committer, etc.) will continue to use the main ClickHouse instance
# 3. This provides read/write separation and allows you to scale your readonly queries independently
# 4. If readonly configuration is not provided, API endpoints will fall back to the main ClickHouse instance
