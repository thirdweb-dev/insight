// Code generated by mockery v2.50.4. DO NOT EDIT.

//go:build !production

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
	common "github.com/thirdweb-dev/indexer/internal/common"

	storage "github.com/thirdweb-dev/indexer/internal/storage"
)

// MockIStagingStorage is an autogenerated mock type for the IStagingStorage type
type MockIStagingStorage struct {
	mock.Mock
}

type MockIStagingStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIStagingStorage) EXPECT() *MockIStagingStorage_Expecter {
	return &MockIStagingStorage_Expecter{mock: &_m.Mock}
}

// DeleteStagingData provides a mock function with given fields: data
func (_m *MockIStagingStorage) DeleteStagingData(data *[]common.BlockData) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStagingData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]common.BlockData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIStagingStorage_DeleteStagingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStagingData'
type MockIStagingStorage_DeleteStagingData_Call struct {
	*mock.Call
}

// DeleteStagingData is a helper method to define mock.On call
//   - data *[]common.BlockData
func (_e *MockIStagingStorage_Expecter) DeleteStagingData(data interface{}) *MockIStagingStorage_DeleteStagingData_Call {
	return &MockIStagingStorage_DeleteStagingData_Call{Call: _e.mock.On("DeleteStagingData", data)}
}

func (_c *MockIStagingStorage_DeleteStagingData_Call) Run(run func(data *[]common.BlockData)) *MockIStagingStorage_DeleteStagingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*[]common.BlockData))
	})
	return _c
}

func (_c *MockIStagingStorage_DeleteStagingData_Call) Return(_a0 error) *MockIStagingStorage_DeleteStagingData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIStagingStorage_DeleteStagingData_Call) RunAndReturn(run func(*[]common.BlockData) error) *MockIStagingStorage_DeleteStagingData_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastStagedBlockNumber provides a mock function with given fields: chainId, rangeStart, rangeEnd
func (_m *MockIStagingStorage) GetLastStagedBlockNumber(chainId *big.Int, rangeStart *big.Int, rangeEnd *big.Int) (*big.Int, error) {
	ret := _m.Called(chainId, rangeStart, rangeEnd)

	if len(ret) == 0 {
		panic("no return value specified for GetLastStagedBlockNumber")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int, *big.Int) (*big.Int, error)); ok {
		return rf(chainId, rangeStart, rangeEnd)
	}
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int, *big.Int) *big.Int); ok {
		r0 = rf(chainId, rangeStart, rangeEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int, *big.Int, *big.Int) error); ok {
		r1 = rf(chainId, rangeStart, rangeEnd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIStagingStorage_GetLastStagedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastStagedBlockNumber'
type MockIStagingStorage_GetLastStagedBlockNumber_Call struct {
	*mock.Call
}

// GetLastStagedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
//   - rangeStart *big.Int
//   - rangeEnd *big.Int
func (_e *MockIStagingStorage_Expecter) GetLastStagedBlockNumber(chainId interface{}, rangeStart interface{}, rangeEnd interface{}) *MockIStagingStorage_GetLastStagedBlockNumber_Call {
	return &MockIStagingStorage_GetLastStagedBlockNumber_Call{Call: _e.mock.On("GetLastStagedBlockNumber", chainId, rangeStart, rangeEnd)}
}

func (_c *MockIStagingStorage_GetLastStagedBlockNumber_Call) Run(run func(chainId *big.Int, rangeStart *big.Int, rangeEnd *big.Int)) *MockIStagingStorage_GetLastStagedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int), args[1].(*big.Int), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockIStagingStorage_GetLastStagedBlockNumber_Call) Return(maxBlockNumber *big.Int, err error) *MockIStagingStorage_GetLastStagedBlockNumber_Call {
	_c.Call.Return(maxBlockNumber, err)
	return _c
}

func (_c *MockIStagingStorage_GetLastStagedBlockNumber_Call) RunAndReturn(run func(*big.Int, *big.Int, *big.Int) (*big.Int, error)) *MockIStagingStorage_GetLastStagedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetStagingData provides a mock function with given fields: qf
func (_m *MockIStagingStorage) GetStagingData(qf storage.QueryFilter) (*[]common.BlockData, error) {
	ret := _m.Called(qf)

	if len(ret) == 0 {
		panic("no return value specified for GetStagingData")
	}

	var r0 *[]common.BlockData
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.QueryFilter) (*[]common.BlockData, error)); ok {
		return rf(qf)
	}
	if rf, ok := ret.Get(0).(func(storage.QueryFilter) *[]common.BlockData); ok {
		r0 = rf(qf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]common.BlockData)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.QueryFilter) error); ok {
		r1 = rf(qf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIStagingStorage_GetStagingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStagingData'
type MockIStagingStorage_GetStagingData_Call struct {
	*mock.Call
}

// GetStagingData is a helper method to define mock.On call
//   - qf storage.QueryFilter
func (_e *MockIStagingStorage_Expecter) GetStagingData(qf interface{}) *MockIStagingStorage_GetStagingData_Call {
	return &MockIStagingStorage_GetStagingData_Call{Call: _e.mock.On("GetStagingData", qf)}
}

func (_c *MockIStagingStorage_GetStagingData_Call) Run(run func(qf storage.QueryFilter)) *MockIStagingStorage_GetStagingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.QueryFilter))
	})
	return _c
}

func (_c *MockIStagingStorage_GetStagingData_Call) Return(data *[]common.BlockData, err error) *MockIStagingStorage_GetStagingData_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *MockIStagingStorage_GetStagingData_Call) RunAndReturn(run func(storage.QueryFilter) (*[]common.BlockData, error)) *MockIStagingStorage_GetStagingData_Call {
	_c.Call.Return(run)
	return _c
}

// InsertStagingData provides a mock function with given fields: data
func (_m *MockIStagingStorage) InsertStagingData(data []common.BlockData) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertStagingData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]common.BlockData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIStagingStorage_InsertStagingData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertStagingData'
type MockIStagingStorage_InsertStagingData_Call struct {
	*mock.Call
}

// InsertStagingData is a helper method to define mock.On call
//   - data []common.BlockData
func (_e *MockIStagingStorage_Expecter) InsertStagingData(data interface{}) *MockIStagingStorage_InsertStagingData_Call {
	return &MockIStagingStorage_InsertStagingData_Call{Call: _e.mock.On("InsertStagingData", data)}
}

func (_c *MockIStagingStorage_InsertStagingData_Call) Run(run func(data []common.BlockData)) *MockIStagingStorage_InsertStagingData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]common.BlockData))
	})
	return _c
}

func (_c *MockIStagingStorage_InsertStagingData_Call) Return(_a0 error) *MockIStagingStorage_InsertStagingData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIStagingStorage_InsertStagingData_Call) RunAndReturn(run func([]common.BlockData) error) *MockIStagingStorage_InsertStagingData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIStagingStorage creates a new instance of MockIStagingStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIStagingStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIStagingStorage {
	mock := &MockIStagingStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
