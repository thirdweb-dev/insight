// Code generated by mockery v2.50.4. DO NOT EDIT.

//go:build !production

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
	rpc "github.com/thirdweb-dev/indexer/internal/rpc"
)

// MockIRPCClient is an autogenerated mock type for the IRPCClient type
type MockIRPCClient struct {
	mock.Mock
}

type MockIRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRPCClient) EXPECT() *MockIRPCClient_Expecter {
	return &MockIRPCClient_Expecter{mock: &_m.Mock}
}

// GetBlocks provides a mock function with given fields: blockNumbers
func (_m *MockIRPCClient) GetBlocks(blockNumbers []*big.Int) []rpc.GetBlocksResult {
	ret := _m.Called(blockNumbers)

	if len(ret) == 0 {
		panic("no return value specified for GetBlocks")
	}

	var r0 []rpc.GetBlocksResult
	if rf, ok := ret.Get(0).(func([]*big.Int) []rpc.GetBlocksResult); ok {
		r0 = rf(blockNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rpc.GetBlocksResult)
		}
	}

	return r0
}

// MockIRPCClient_GetBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocks'
type MockIRPCClient_GetBlocks_Call struct {
	*mock.Call
}

// GetBlocks is a helper method to define mock.On call
//   - blockNumbers []*big.Int
func (_e *MockIRPCClient_Expecter) GetBlocks(blockNumbers interface{}) *MockIRPCClient_GetBlocks_Call {
	return &MockIRPCClient_GetBlocks_Call{Call: _e.mock.On("GetBlocks", blockNumbers)}
}

func (_c *MockIRPCClient_GetBlocks_Call) Run(run func(blockNumbers []*big.Int)) *MockIRPCClient_GetBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*big.Int))
	})
	return _c
}

func (_c *MockIRPCClient_GetBlocks_Call) Return(_a0 []rpc.GetBlocksResult) *MockIRPCClient_GetBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_GetBlocks_Call) RunAndReturn(run func([]*big.Int) []rpc.GetBlocksResult) *MockIRPCClient_GetBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocksPerRequest provides a mock function with no fields
func (_m *MockIRPCClient) GetBlocksPerRequest() rpc.BlocksPerRequestConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlocksPerRequest")
	}

	var r0 rpc.BlocksPerRequestConfig
	if rf, ok := ret.Get(0).(func() rpc.BlocksPerRequestConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rpc.BlocksPerRequestConfig)
	}

	return r0
}

// MockIRPCClient_GetBlocksPerRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocksPerRequest'
type MockIRPCClient_GetBlocksPerRequest_Call struct {
	*mock.Call
}

// GetBlocksPerRequest is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) GetBlocksPerRequest() *MockIRPCClient_GetBlocksPerRequest_Call {
	return &MockIRPCClient_GetBlocksPerRequest_Call{Call: _e.mock.On("GetBlocksPerRequest")}
}

func (_c *MockIRPCClient_GetBlocksPerRequest_Call) Run(run func()) *MockIRPCClient_GetBlocksPerRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_GetBlocksPerRequest_Call) Return(_a0 rpc.BlocksPerRequestConfig) *MockIRPCClient_GetBlocksPerRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_GetBlocksPerRequest_Call) RunAndReturn(run func() rpc.BlocksPerRequestConfig) *MockIRPCClient_GetBlocksPerRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainID provides a mock function with no fields
func (_m *MockIRPCClient) GetChainID() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChainID")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// MockIRPCClient_GetChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainID'
type MockIRPCClient_GetChainID_Call struct {
	*mock.Call
}

// GetChainID is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) GetChainID() *MockIRPCClient_GetChainID_Call {
	return &MockIRPCClient_GetChainID_Call{Call: _e.mock.On("GetChainID")}
}

func (_c *MockIRPCClient_GetChainID_Call) Run(run func()) *MockIRPCClient_GetChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_GetChainID_Call) Return(_a0 *big.Int) *MockIRPCClient_GetChainID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_GetChainID_Call) RunAndReturn(run func() *big.Int) *MockIRPCClient_GetChainID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullBlocks provides a mock function with given fields: blockNumbers
func (_m *MockIRPCClient) GetFullBlocks(blockNumbers []*big.Int) []rpc.GetFullBlockResult {
	ret := _m.Called(blockNumbers)

	if len(ret) == 0 {
		panic("no return value specified for GetFullBlocks")
	}

	var r0 []rpc.GetFullBlockResult
	if rf, ok := ret.Get(0).(func([]*big.Int) []rpc.GetFullBlockResult); ok {
		r0 = rf(blockNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rpc.GetFullBlockResult)
		}
	}

	return r0
}

// MockIRPCClient_GetFullBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullBlocks'
type MockIRPCClient_GetFullBlocks_Call struct {
	*mock.Call
}

// GetFullBlocks is a helper method to define mock.On call
//   - blockNumbers []*big.Int
func (_e *MockIRPCClient_Expecter) GetFullBlocks(blockNumbers interface{}) *MockIRPCClient_GetFullBlocks_Call {
	return &MockIRPCClient_GetFullBlocks_Call{Call: _e.mock.On("GetFullBlocks", blockNumbers)}
}

func (_c *MockIRPCClient_GetFullBlocks_Call) Run(run func(blockNumbers []*big.Int)) *MockIRPCClient_GetFullBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*big.Int))
	})
	return _c
}

func (_c *MockIRPCClient_GetFullBlocks_Call) Return(_a0 []rpc.GetFullBlockResult) *MockIRPCClient_GetFullBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_GetFullBlocks_Call) RunAndReturn(run func([]*big.Int) []rpc.GetFullBlockResult) *MockIRPCClient_GetFullBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlockNumber provides a mock function with no fields
func (_m *MockIRPCClient) GetLatestBlockNumber() (*big.Int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBlockNumber")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func() (*big.Int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRPCClient_GetLatestBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlockNumber'
type MockIRPCClient_GetLatestBlockNumber_Call struct {
	*mock.Call
}

// GetLatestBlockNumber is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) GetLatestBlockNumber() *MockIRPCClient_GetLatestBlockNumber_Call {
	return &MockIRPCClient_GetLatestBlockNumber_Call{Call: _e.mock.On("GetLatestBlockNumber")}
}

func (_c *MockIRPCClient_GetLatestBlockNumber_Call) Run(run func()) *MockIRPCClient_GetLatestBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_GetLatestBlockNumber_Call) Return(_a0 *big.Int, _a1 error) *MockIRPCClient_GetLatestBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRPCClient_GetLatestBlockNumber_Call) RunAndReturn(run func() (*big.Int, error)) *MockIRPCClient_GetLatestBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function with no fields
func (_m *MockIRPCClient) GetURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIRPCClient_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type MockIRPCClient_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) GetURL() *MockIRPCClient_GetURL_Call {
	return &MockIRPCClient_GetURL_Call{Call: _e.mock.On("GetURL")}
}

func (_c *MockIRPCClient_GetURL_Call) Run(run func()) *MockIRPCClient_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_GetURL_Call) Return(_a0 string) *MockIRPCClient_GetURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_GetURL_Call) RunAndReturn(run func() string) *MockIRPCClient_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// IsWebsocket provides a mock function with no fields
func (_m *MockIRPCClient) IsWebsocket() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWebsocket")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIRPCClient_IsWebsocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWebsocket'
type MockIRPCClient_IsWebsocket_Call struct {
	*mock.Call
}

// IsWebsocket is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) IsWebsocket() *MockIRPCClient_IsWebsocket_Call {
	return &MockIRPCClient_IsWebsocket_Call{Call: _e.mock.On("IsWebsocket")}
}

func (_c *MockIRPCClient_IsWebsocket_Call) Run(run func()) *MockIRPCClient_IsWebsocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_IsWebsocket_Call) Return(_a0 bool) *MockIRPCClient_IsWebsocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_IsWebsocket_Call) RunAndReturn(run func() bool) *MockIRPCClient_IsWebsocket_Call {
	_c.Call.Return(run)
	return _c
}

// SupportsTraceBlock provides a mock function with no fields
func (_m *MockIRPCClient) SupportsTraceBlock() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportsTraceBlock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockIRPCClient_SupportsTraceBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportsTraceBlock'
type MockIRPCClient_SupportsTraceBlock_Call struct {
	*mock.Call
}

// SupportsTraceBlock is a helper method to define mock.On call
func (_e *MockIRPCClient_Expecter) SupportsTraceBlock() *MockIRPCClient_SupportsTraceBlock_Call {
	return &MockIRPCClient_SupportsTraceBlock_Call{Call: _e.mock.On("SupportsTraceBlock")}
}

func (_c *MockIRPCClient_SupportsTraceBlock_Call) Run(run func()) *MockIRPCClient_SupportsTraceBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRPCClient_SupportsTraceBlock_Call) Return(_a0 bool) *MockIRPCClient_SupportsTraceBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRPCClient_SupportsTraceBlock_Call) RunAndReturn(run func() bool) *MockIRPCClient_SupportsTraceBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRPCClient creates a new instance of MockIRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRPCClient {
	mock := &MockIRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
