// Code generated by mockery v2.53.5. DO NOT EDIT.

//go:build !production

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"
)

// MockIOrchestratorStorage is an autogenerated mock type for the IOrchestratorStorage type
type MockIOrchestratorStorage struct {
	mock.Mock
}

type MockIOrchestratorStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrchestratorStorage) EXPECT() *MockIOrchestratorStorage_Expecter {
	return &MockIOrchestratorStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockIOrchestratorStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrchestratorStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIOrchestratorStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIOrchestratorStorage_Expecter) Close() *MockIOrchestratorStorage_Close_Call {
	return &MockIOrchestratorStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIOrchestratorStorage_Close_Call) Run(run func()) *MockIOrchestratorStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIOrchestratorStorage_Close_Call) Return(_a0 error) *MockIOrchestratorStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrchestratorStorage_Close_Call) RunAndReturn(run func() error) *MockIOrchestratorStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastCommittedBlockNumber provides a mock function with given fields: chainId
func (_m *MockIOrchestratorStorage) GetLastCommittedBlockNumber(chainId *big.Int) (*big.Int, error) {
	ret := _m.Called(chainId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastCommittedBlockNumber")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*big.Int, error)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastCommittedBlockNumber'
type MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call struct {
	*mock.Call
}

// GetLastCommittedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
func (_e *MockIOrchestratorStorage_Expecter) GetLastCommittedBlockNumber(chainId interface{}) *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call {
	return &MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call{Call: _e.mock.On("GetLastCommittedBlockNumber", chainId)}
}

func (_c *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call) Run(run func(chainId *big.Int)) *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call) Return(blockNumber *big.Int, err error) *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call {
	_c.Call.Return(blockNumber, err)
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call) RunAndReturn(run func(*big.Int) (*big.Int, error)) *MockIOrchestratorStorage_GetLastCommittedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastPublishedBlockNumber provides a mock function with given fields: chainId
func (_m *MockIOrchestratorStorage) GetLastPublishedBlockNumber(chainId *big.Int) (*big.Int, error) {
	ret := _m.Called(chainId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPublishedBlockNumber")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*big.Int, error)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastPublishedBlockNumber'
type MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call struct {
	*mock.Call
}

// GetLastPublishedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
func (_e *MockIOrchestratorStorage_Expecter) GetLastPublishedBlockNumber(chainId interface{}) *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call {
	return &MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call{Call: _e.mock.On("GetLastPublishedBlockNumber", chainId)}
}

func (_c *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call) Run(run func(chainId *big.Int)) *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call) Return(blockNumber *big.Int, err error) *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call {
	_c.Call.Return(blockNumber, err)
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call) RunAndReturn(run func(*big.Int) (*big.Int, error)) *MockIOrchestratorStorage_GetLastPublishedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastReorgCheckedBlockNumber provides a mock function with given fields: chainId
func (_m *MockIOrchestratorStorage) GetLastReorgCheckedBlockNumber(chainId *big.Int) (*big.Int, error) {
	ret := _m.Called(chainId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastReorgCheckedBlockNumber")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*big.Int) (*big.Int, error)); ok {
		return rf(chainId)
	}
	if rf, ok := ret.Get(0).(func(*big.Int) *big.Int); ok {
		r0 = rf(chainId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*big.Int) error); ok {
		r1 = rf(chainId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastReorgCheckedBlockNumber'
type MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call struct {
	*mock.Call
}

// GetLastReorgCheckedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
func (_e *MockIOrchestratorStorage_Expecter) GetLastReorgCheckedBlockNumber(chainId interface{}) *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call {
	return &MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call{Call: _e.mock.On("GetLastReorgCheckedBlockNumber", chainId)}
}

func (_c *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call) Run(run func(chainId *big.Int)) *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call) Return(_a0 *big.Int, _a1 error) *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call) RunAndReturn(run func(*big.Int) (*big.Int, error)) *MockIOrchestratorStorage_GetLastReorgCheckedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastCommittedBlockNumber provides a mock function with given fields: chainId, blockNumber
func (_m *MockIOrchestratorStorage) SetLastCommittedBlockNumber(chainId *big.Int, blockNumber *big.Int) error {
	ret := _m.Called(chainId, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for SetLastCommittedBlockNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) error); ok {
		r0 = rf(chainId, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastCommittedBlockNumber'
type MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call struct {
	*mock.Call
}

// SetLastCommittedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
//   - blockNumber *big.Int
func (_e *MockIOrchestratorStorage_Expecter) SetLastCommittedBlockNumber(chainId interface{}, blockNumber interface{}) *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call {
	return &MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call{Call: _e.mock.On("SetLastCommittedBlockNumber", chainId, blockNumber)}
}

func (_c *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call) Run(run func(chainId *big.Int, blockNumber *big.Int)) *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call) Return(_a0 error) *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call) RunAndReturn(run func(*big.Int, *big.Int) error) *MockIOrchestratorStorage_SetLastCommittedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastPublishedBlockNumber provides a mock function with given fields: chainId, blockNumber
func (_m *MockIOrchestratorStorage) SetLastPublishedBlockNumber(chainId *big.Int, blockNumber *big.Int) error {
	ret := _m.Called(chainId, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for SetLastPublishedBlockNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) error); ok {
		r0 = rf(chainId, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastPublishedBlockNumber'
type MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call struct {
	*mock.Call
}

// SetLastPublishedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
//   - blockNumber *big.Int
func (_e *MockIOrchestratorStorage_Expecter) SetLastPublishedBlockNumber(chainId interface{}, blockNumber interface{}) *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call {
	return &MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call{Call: _e.mock.On("SetLastPublishedBlockNumber", chainId, blockNumber)}
}

func (_c *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call) Run(run func(chainId *big.Int, blockNumber *big.Int)) *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call) Return(_a0 error) *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call) RunAndReturn(run func(*big.Int, *big.Int) error) *MockIOrchestratorStorage_SetLastPublishedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastReorgCheckedBlockNumber provides a mock function with given fields: chainId, blockNumber
func (_m *MockIOrchestratorStorage) SetLastReorgCheckedBlockNumber(chainId *big.Int, blockNumber *big.Int) error {
	ret := _m.Called(chainId, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for SetLastReorgCheckedBlockNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, *big.Int) error); ok {
		r0 = rf(chainId, blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastReorgCheckedBlockNumber'
type MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call struct {
	*mock.Call
}

// SetLastReorgCheckedBlockNumber is a helper method to define mock.On call
//   - chainId *big.Int
//   - blockNumber *big.Int
func (_e *MockIOrchestratorStorage_Expecter) SetLastReorgCheckedBlockNumber(chainId interface{}, blockNumber interface{}) *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call {
	return &MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call{Call: _e.mock.On("SetLastReorgCheckedBlockNumber", chainId, blockNumber)}
}

func (_c *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call) Run(run func(chainId *big.Int, blockNumber *big.Int)) *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*big.Int), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call) Return(_a0 error) *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call) RunAndReturn(run func(*big.Int, *big.Int) error) *MockIOrchestratorStorage_SetLastReorgCheckedBlockNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOrchestratorStorage creates a new instance of MockIOrchestratorStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrchestratorStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrchestratorStorage {
	mock := &MockIOrchestratorStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
