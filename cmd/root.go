package cmd

import (
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	configs "github.com/thirdweb-dev/indexer/configs"
	customLogger "github.com/thirdweb-dev/indexer/internal/log"
)

var (
	// Used for flags.
	cfgFile string

	rootCmd = &cobra.Command{
		Use:   "indexer",
		Short: "TBD",
		Long:  "TBD",
		Run: func(cmd *cobra.Command, args []string) {
			go func() {
				RunOrchestrator(cmd, args)
			}()
			RunApi(cmd, args)
		},
	}
)

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is ./configs/config.yml)")
	rootCmd.PersistentFlags().String("rpc-url", "", "RPC Url to use for the indexer")
	rootCmd.PersistentFlags().Int("rpc-blocks-blocksPerRequest", 0, "How many blocks to fetch per request")
	rootCmd.PersistentFlags().Int("rpc-blocks-batchDelay", 0, "Milliseconds to wait between batches of blocks when fetching from the RPC")
	rootCmd.PersistentFlags().Int("rpc-logs-blocksPerRequest", 0, "How many blocks to fetch logs per request")
	rootCmd.PersistentFlags().Int("rpc-logs-batchDelay", 0, "Milliseconds to wait between batches of logs when fetching from the RPC")
	rootCmd.PersistentFlags().Bool("rpc-blockReceipts-enabled", false, "Whether to enable fetching block receipts from the RPC")
	rootCmd.PersistentFlags().Int("rpc-blockReceipts-blocksPerRequest", 0, "How many blocks to fetch receipts for per request")
	rootCmd.PersistentFlags().Int("rpc-blockReceipts-batchDelay", 0, "Milliseconds to wait between batches of receipts when fetching from the RPC")
	rootCmd.PersistentFlags().Bool("rpc-traces-enabled", true, "Whether to enable fetching traces from the RPC")
	rootCmd.PersistentFlags().Int("rpc-traces-blocksPerRequest", 0, "How many blocks to fetch traces per request")
	rootCmd.PersistentFlags().Int("rpc-traces-batchDelay", 0, "Milliseconds to wait between batches of traces when fetching from the RPC")
	rootCmd.PersistentFlags().String("log-level", "", "Log level to use for the application")
	rootCmd.PersistentFlags().Bool("log-prettify", false, "Whether to prettify the log output")
	rootCmd.PersistentFlags().Bool("poller-enabled", true, "Toggle poller")
	rootCmd.PersistentFlags().Bool("poller-interval", true, "Poller interval")
	rootCmd.PersistentFlags().Int("poller-blocks-per-poll", 10, "How many blocks to poll each interval")
	rootCmd.PersistentFlags().Int("poller-from-block", 0, "From which block to start polling")
	rootCmd.PersistentFlags().Bool("poller-force-from-block", false, "Force the poller to start from the block specified in `poller-from-block`")
	rootCmd.PersistentFlags().Int("poller-until-block", 0, "Until which block to poll")
	rootCmd.PersistentFlags().Int("poller-parallel-pollers", 5, "Maximum number of parallel pollers")
	rootCmd.PersistentFlags().String("poller-s3-bucket", "", "S3 bucket for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-region", "", "S3 region for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-prefix", "", "S3 prefix for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-accessKeyId", "", "S3 access key ID for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-secretAccessKey", "", "S3 secret access key for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-endpoint", "", "S3 endpoint for poller archive source (for S3-compatible services)")
	rootCmd.PersistentFlags().String("poller-s3-format", "parquet", "S3 storage format for poller archive source")
	rootCmd.PersistentFlags().String("poller-s3-cacheDir", "/tmp/insight-archive", "Local cache directory for poller archive source")
	rootCmd.PersistentFlags().Int("poller-s3-metadataTTL", 0, "Metadata cache TTL in seconds for poller archive source")
	rootCmd.PersistentFlags().Int("poller-s3-fileCacheTTL", 0, "File cache TTL in seconds for poller archive source")
	rootCmd.PersistentFlags().Int64("poller-s3-maxCacheSize", 0, "Max cache size in bytes for poller archive source (default 5GB)")
	rootCmd.PersistentFlags().Int("poller-s3-cleanupInterval", 0, "Cache cleanup interval in seconds for poller archive source")
	rootCmd.PersistentFlags().Int("poller-s3-maxConcurrentDownloads", 3, "Max concurrent downloads for poller archive source")
	rootCmd.PersistentFlags().Bool("committer-enabled", true, "Toggle committer")
	rootCmd.PersistentFlags().Int("committer-blocks-per-commit", 10, "How many blocks to commit each interval")
	rootCmd.PersistentFlags().Int("committer-interval", 1000, "How often to commit blocks in milliseconds")
	rootCmd.PersistentFlags().Int("committer-from-block", 0, "From which block to start committing")
	rootCmd.PersistentFlags().Bool("reorgHandler-enabled", true, "Toggle reorg handler")
	rootCmd.PersistentFlags().Int("reorgHandler-interval", 1000, "How often to run reorg handler in milliseconds")
	rootCmd.PersistentFlags().Int("reorgHandler-blocks-per-scan", 100, "How many blocks to scan for reorgs")
	rootCmd.PersistentFlags().Int("reorgHandler-from-block", 0, "From which block to start scanning for reorgs")
	rootCmd.PersistentFlags().Bool("reorgHandler-force-from-block", false, "Force the reorg handler to start from the block specified in `reorgHandler-from-block`")
	rootCmd.PersistentFlags().Bool("failure-recoverer-enabled", true, "Toggle failure recoverer")
	rootCmd.PersistentFlags().Int("failure-recoverer-blocks-per-run", 10, "How many blocks to run failure recoverer for")
	rootCmd.PersistentFlags().Int("failure-recoverer-interval", 1000, "How often to run failure recoverer in milliseconds")
	rootCmd.PersistentFlags().String("storage-staging-clickhouse-database", "", "Clickhouse database for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-port", 0, "Clickhouse port for staging storage")
	rootCmd.PersistentFlags().String("storage-main-clickhouse-database", "", "Clickhouse database for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-port", 0, "Clickhouse port for main storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-clickhouse-database", "", "Clickhouse database for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-port", 0, "Clickhouse port for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-clickhouse-host", "", "Clickhouse host for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-clickhouse-username", "", "Clickhouse username for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-clickhouse-password", "", "Clickhouse password for orchestrator storage")
	rootCmd.PersistentFlags().Bool("storage-orchestrator-clickhouse-asyncInsert", false, "Clickhouse async insert for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-maxRowsPerInsert", 100000, "Clickhouse max rows per insert for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-maxOpenConns", 30, "Clickhouse max open connections for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-maxIdleConns", 30, "Clickhouse max idle connections for orchestrator storage")
	rootCmd.PersistentFlags().Bool("storage-orchestrator-clickhouse-disableTLS", false, "Clickhouse disableTLS for orchestrator storage")
	rootCmd.PersistentFlags().Bool("storage-orchestrator-clickhouse-enableParallelViewProcessing", false, "Clickhouse enableParallelViewProcessing for orchestrator storage")
	rootCmd.PersistentFlags().Bool("storage-orchestrator-clickhouse-enableCompression", false, "Clickhouse enableCompression for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-maxQueryTime", 60, "Clickhouse max query time for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-clickhouse-maxMemoryUsage", 1000000000, "Clickhouse max memory usage in bytes for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-postgres-host", "", "PostgreSQL host for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-postgres-port", 5432, "PostgreSQL port for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-postgres-username", "", "PostgreSQL username for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-postgres-password", "", "PostgreSQL password for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-postgres-database", "", "PostgreSQL database for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-postgres-sslMode", "require", "PostgreSQL SSL mode for orchestrator storage (disable, require, verify-ca, verify-full)")
	rootCmd.PersistentFlags().Int("storage-orchestrator-postgres-maxOpenConns", 50, "PostgreSQL max open connections for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-postgres-maxIdleConns", 25, "PostgreSQL max idle connections for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-postgres-maxConnLifetime", 300, "PostgreSQL max connection lifetime in seconds for orchestrator storage")
	rootCmd.PersistentFlags().Int("storage-orchestrator-postgres-connectTimeout", 10, "PostgreSQL connection timeout in seconds for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-staging-clickhouse-host", "", "Clickhouse host for staging storage")
	rootCmd.PersistentFlags().String("storage-main-clickhouse-host", "", "Clickhouse host for main storage")
	rootCmd.PersistentFlags().String("storage-main-clickhouse-username", "", "Clickhouse username for main storage")
	rootCmd.PersistentFlags().String("storage-main-clickhouse-password", "", "Clickhouse password for main storage")
	rootCmd.PersistentFlags().Bool("storage-main-clickhouse-asyncInsert", false, "Clickhouse async insert for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-maxRowsPerInsert", 100000, "Clickhouse max rows per insert for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-maxOpenConns", 30, "Clickhouse max open connections for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-maxIdleConns", 30, "Clickhouse max idle connections for main storage")
	rootCmd.PersistentFlags().Bool("storage-main-clickhouse-disableTLS", false, "Clickhouse disableTLS for main storage")
	rootCmd.PersistentFlags().Bool("storage-main-clickhouse-enableParallelViewProcessing", false, "Clickhouse enableParallelViewProcessing for main storage")
	rootCmd.PersistentFlags().Bool("storage-main-clickhouse-enableCompression", false, "Clickhouse enableCompression for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-maxQueryTime", 60, "Clickhouse max query time for main storage")
	rootCmd.PersistentFlags().Int("storage-main-clickhouse-maxMemoryUsage", 1000000000, "Clickhouse max memory usage in bytes for main storage")
	rootCmd.PersistentFlags().String("storage-staging-clickhouse-username", "", "Clickhouse username for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-clickhouse-password", "", "Clickhouse password for staging storage")
	rootCmd.PersistentFlags().Bool("storage-staging-clickhouse-asyncInsert", false, "Clickhouse async insert for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-maxRowsPerInsert", 100000, "Clickhouse max rows per insert for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-maxOpenConns", 30, "Clickhouse max open connections for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-maxIdleConns", 30, "Clickhouse max idle connections for staging storage")
	rootCmd.PersistentFlags().Bool("storage-staging-clickhouse-disableTLS", false, "Clickhouse disableTLS for staging storage")
	rootCmd.PersistentFlags().Bool("storage-staging-clickhouse-enableParallelViewProcessing", false, "Clickhouse enableParallelViewProcessing for staging storage")
	rootCmd.PersistentFlags().Bool("storage-staging-clickhouse-enableCompression", false, "Clickhouse enableCompression for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-maxQueryTime", 60, "Clickhouse max query time for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-clickhouse-maxMemoryUsage", 1000000000, "Clickhouse max memory usage in bytes for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-postgres-host", "", "PostgreSQL host for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-postgres-port", 5432, "PostgreSQL port for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-postgres-username", "", "PostgreSQL username for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-postgres-password", "", "PostgreSQL password for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-postgres-database", "", "PostgreSQL database for staging storage")
	rootCmd.PersistentFlags().String("storage-staging-postgres-sslMode", "require", "PostgreSQL SSL mode for staging storage (disable, require, verify-ca, verify-full)")
	rootCmd.PersistentFlags().Int("storage-staging-postgres-maxOpenConns", 50, "PostgreSQL max open connections for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-postgres-maxIdleConns", 25, "PostgreSQL max idle connections for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-postgres-maxConnLifetime", 300, "PostgreSQL max connection lifetime in seconds for staging storage")
	rootCmd.PersistentFlags().Int("storage-staging-postgres-connectTimeout", 10, "PostgreSQL connection timeout in seconds for staging storage")
	rootCmd.PersistentFlags().String("storage-main-kafka-brokers", "", "Kafka brokers for main storage")
	rootCmd.PersistentFlags().String("storage-main-kafka-username", "", "Kafka username for main storage")
	rootCmd.PersistentFlags().String("storage-main-kafka-password", "", "Kafka password for main storage")
	rootCmd.PersistentFlags().Bool("storage-main-kafka-enable-tls", true, "Enable TLS for Kafka connection in main storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-redis-host", "", "Redis host for orchestrator storage metadata")
	rootCmd.PersistentFlags().Int("storage-orchestrator-redis-port", 6379, "Redis port for orchestrator storage metadata")
	rootCmd.PersistentFlags().String("storage-orchestrator-redis-password", "", "Redis password for orchestator storage  metadata")
	rootCmd.PersistentFlags().Int("storage-orchestrator-redis-db", 0, "Redis database number for orchestrator storage metadata")
	rootCmd.PersistentFlags().Bool("storage-orchestrator-redis-enableTLS", true, "Enable TLS for Redis connection in orchestrator storage metadata")
	rootCmd.PersistentFlags().String("storage-staging-type", "auto", "Storage type for staging (auto, clickhouse, postgres, kafka, badger, s3)")
	rootCmd.PersistentFlags().String("storage-main-type", "auto", "Storage type for main (auto, clickhouse, postgres, kafka, badger, s3)")
	rootCmd.PersistentFlags().String("storage-orchestrator-type", "auto", "Storage type for orchestrator (auto, clickhouse, postgres, badger)")
	rootCmd.PersistentFlags().String("storage-staging-badger-path", "", "BadgerDB path for staging storage")
	rootCmd.PersistentFlags().String("storage-orchestrator-badger-path", "", "BadgerDB path for orchestrator storage")
	rootCmd.PersistentFlags().String("storage-main-s3-bucket", "", "S3 bucket for main storage")
	rootCmd.PersistentFlags().String("storage-main-s3-region", "", "S3 region for main storage")
	rootCmd.PersistentFlags().String("storage-main-s3-prefix", "", "S3 key prefix for main storage")
	rootCmd.PersistentFlags().String("storage-main-s3-accessKeyId", "", "S3 access key ID for main storage")
	rootCmd.PersistentFlags().String("storage-main-s3-secretAccessKey", "", "S3 secret access key for main storage")
	rootCmd.PersistentFlags().String("storage-main-s3-endpoint", "", "S3 endpoint URL for main storage (for S3-compatible services)")
	rootCmd.PersistentFlags().String("storage-main-s3-format", "parquet", "S3 storage format for main storage (parquet or json)")
	rootCmd.PersistentFlags().Int64("storage-main-s3-bufferSizeMB", 512, "S3 buffer size in MB before flush for main storage")
	rootCmd.PersistentFlags().Int("storage-main-s3-bufferTimeoutSeconds", 300, "S3 buffer timeout in seconds before flush for main storage")
	rootCmd.PersistentFlags().Int("storage-main-s3-maxBlocksPerFile", 0, "S3 max blocks per file for main storage (0 = no limit)")
	rootCmd.PersistentFlags().String("storage-main-s3-parquet-compression", "snappy", "Parquet compression type for S3 main storage")
	rootCmd.PersistentFlags().Int64("storage-main-s3-parquet-rowGroupSize", 256, "Parquet row group size in MB for S3 main storage")
	rootCmd.PersistentFlags().Int64("storage-main-s3-parquet-pageSize", 8192, "Parquet page size in KB for S3 main storage")
	rootCmd.PersistentFlags().String("api-host", "localhost:3000", "API host")
	rootCmd.PersistentFlags().String("api-basicAuth-username", "", "API basic auth username")
	rootCmd.PersistentFlags().String("api-basicAuth-password", "", "API basic auth password")
	rootCmd.PersistentFlags().String("api-thirdweb-clientId", "", "Thirdweb client id")
	rootCmd.PersistentFlags().Int("api-contractApiRequest-maxIdleConns", 100, "Max idle connections for contract API request")
	rootCmd.PersistentFlags().Int("api-contractApiRequest-maxIdleConnsPerHost", 100, "Max idle connections per host for contract API request")
	rootCmd.PersistentFlags().Int("api-contractApiRequest-maxConnsPerHost", 100, "Max connections per host for contract API request")
	rootCmd.PersistentFlags().Int("api-contractApiRequest-idleConnTimeout", 90, "Idle connection timeout for contract API request in seconds")
	rootCmd.PersistentFlags().Bool("api-contractApiRequest-disableCompression", false, "Disable compression for contract API request")
	rootCmd.PersistentFlags().Int("api-contractApiRequest-timeout", 10, "Timeout in seconds for contract API request")
	rootCmd.PersistentFlags().Bool("publisher-enabled", false, "Toggle publisher")
	rootCmd.PersistentFlags().String("publisher-mode", "default", "Publisher mode: default or parallel")
	rootCmd.PersistentFlags().String("publisher-brokers", "", "Kafka brokers")
	rootCmd.PersistentFlags().String("publisher-username", "", "Kafka username for publisher")
	rootCmd.PersistentFlags().String("publisher-password", "", "Kafka password for publisher")
	rootCmd.PersistentFlags().Bool("publisher-enable-tls", true, "Enable TLS for Kafka connection in publisher")
	rootCmd.PersistentFlags().Bool("publisher-blocks-enabled", false, "Toggle block publisher")
	rootCmd.PersistentFlags().String("publisher-blocks-topicName", "", "Kafka topic name for blocks")
	rootCmd.PersistentFlags().Bool("publisher-transactions-enabled", false, "Toggle transaction publisher")
	rootCmd.PersistentFlags().String("publisher-transactions-topicName", "", "Kafka topic name for transactions")
	rootCmd.PersistentFlags().String("publisher-transactions-toFilter", "", "Filter transactions by to address")
	rootCmd.PersistentFlags().String("publisher-transactions-fromFilter", "", "Filter transactions by from address")
	rootCmd.PersistentFlags().Bool("publisher-traces-enabled", false, "Toggle trace publisher")
	rootCmd.PersistentFlags().String("publisher-traces-topicName", "", "Kafka topic name for traces")
	rootCmd.PersistentFlags().Bool("publisher-events-enabled", false, "Toggle event publisher")
	rootCmd.PersistentFlags().String("publisher-events-topicName", "", "Kafka topic name for events")
	rootCmd.PersistentFlags().String("publisher-events-addressFilter", "", "Filter events by address")
	rootCmd.PersistentFlags().String("publisher-events-topic0Filter", "", "Filter events by topic0")
	rootCmd.PersistentFlags().Int("workMode-checkIntervalMinutes", 10, "How often to check work mode in minutes")
	rootCmd.PersistentFlags().Int64("workMode-liveModeThreshold", 500, "How many blocks the indexer can be behind before switching to live mode")
	rootCmd.PersistentFlags().String("validation-mode", "strict", "Validation mode. Strict will validate logsBloom and transactionsRoot. Minimal will validate transaction count and logs existence.")
	rootCmd.PersistentFlags().String("migrator-destination-type", "auto", "Storage type for migrator destination (auto, clickhouse, postgres, kafka, badger, s3)")
	rootCmd.PersistentFlags().String("migrator-destination-clickhouse-host", "", "Clickhouse host for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-clickhouse-port", 0, "Clickhouse port for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-clickhouse-username", "", "Clickhouse username for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-clickhouse-password", "", "Clickhouse password for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-clickhouse-database", "", "Clickhouse database for migrator destination")
	rootCmd.PersistentFlags().Bool("migrator-destination-clickhouse-disableTLS", false, "Clickhouse disableTLS for migrator destination")
	rootCmd.PersistentFlags().Bool("migrator-destination-clickhouse-asyncInsert", false, "Clickhouse async insert for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-clickhouse-maxRowsPerInsert", 100000, "Clickhouse max rows per insert for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-clickhouse-maxOpenConns", 30, "Clickhouse max open connections for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-clickhouse-maxIdleConns", 30, "Clickhouse max idle connections for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-postgres-host", "", "PostgreSQL host for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-postgres-port", 5432, "PostgreSQL port for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-postgres-username", "", "PostgreSQL username for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-postgres-password", "", "PostgreSQL password for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-postgres-database", "", "PostgreSQL database for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-postgres-sslMode", "require", "PostgreSQL SSL mode for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-postgres-maxOpenConns", 50, "PostgreSQL max open connections for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-postgres-maxIdleConns", 25, "PostgreSQL max idle connections for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-postgres-maxConnLifetime", 300, "PostgreSQL max connection lifetime in seconds for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-postgres-connectTimeout", 10, "PostgreSQL connection timeout in seconds for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-kafka-brokers", "", "Kafka brokers for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-kafka-username", "", "Kafka username for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-kafka-password", "", "Kafka password for migrator destination")
	rootCmd.PersistentFlags().Bool("migrator-destination-kafka-enableTLS", true, "Enable TLS for Kafka connection in migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-badger-path", "", "BadgerDB path for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-bucket", "", "S3 bucket for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-region", "", "S3 region for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-prefix", "", "S3 key prefix for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-accessKeyId", "", "S3 access key ID for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-secretAccessKey", "", "S3 secret access key for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-endpoint", "", "S3 endpoint URL for migrator destination")
	rootCmd.PersistentFlags().String("migrator-destination-s3-format", "parquet", "S3 storage format for migrator destination")
	rootCmd.PersistentFlags().Int64("migrator-destination-s3-bufferSizeMB", 512, "S3 buffer size in MB before flush for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-s3-bufferTimeoutSeconds", 300, "S3 buffer timeout in seconds before flush for migrator destination")
	rootCmd.PersistentFlags().Int("migrator-destination-s3-maxBlocksPerFile", 0, "S3 max blocks per file for migrator destination")
	rootCmd.PersistentFlags().Uint("migrator-batchSize", 2000, "Batch size for storage operations in migrator")
	rootCmd.PersistentFlags().Uint("migrator-startBlock", 0, "Start block for migration")
	rootCmd.PersistentFlags().Uint("migrator-endBlock", 0, "End block for migration")
	rootCmd.PersistentFlags().Uint("migrator-workerCount", 0, "Worker count for migration")

	viper.BindPFlag("rpc.url", rootCmd.PersistentFlags().Lookup("rpc-url"))
	viper.BindPFlag("rpc.blocks.blocksPerRequest", rootCmd.PersistentFlags().Lookup("rpc-blocks-blocksPerRequest"))
	viper.BindPFlag("rpc.blocks.batchDelay", rootCmd.PersistentFlags().Lookup("rpc-blocks-batchDelay"))
	viper.BindPFlag("rpc.logs.blocksPerRequest", rootCmd.PersistentFlags().Lookup("rpc-logs-blocksPerRequest"))
	viper.BindPFlag("rpc.logs.batchDelay", rootCmd.PersistentFlags().Lookup("rpc-logs-batchDelay"))
	viper.BindPFlag("rpc.blockReceipts.enabled", rootCmd.PersistentFlags().Lookup("rpc-blockReceipts-enabled"))
	viper.BindPFlag("rpc.blockReceipts.blocksPerRequest", rootCmd.PersistentFlags().Lookup("rpc-blockReceipts-blocksPerRequest"))
	viper.BindPFlag("rpc.blockReceipts.batchDelay", rootCmd.PersistentFlags().Lookup("rpc-blockReceipts-batchDelay"))
	viper.BindPFlag("rpc.traces.enabled", rootCmd.PersistentFlags().Lookup("rpc-traces-enabled"))
	viper.BindPFlag("rpc.traces.blocksPerRequest", rootCmd.PersistentFlags().Lookup("rpc-traces-blocksPerRequest"))
	viper.BindPFlag("rpc.traces.batchDelay", rootCmd.PersistentFlags().Lookup("rpc-traces-batchDelay"))
	viper.BindPFlag("log.level", rootCmd.PersistentFlags().Lookup("log-level"))
	viper.BindPFlag("log.prettify", rootCmd.PersistentFlags().Lookup("log-prettify"))
	viper.BindPFlag("poller.enabled", rootCmd.PersistentFlags().Lookup("poller-enabled"))
	viper.BindPFlag("poller.interval", rootCmd.PersistentFlags().Lookup("poller-interval"))
	viper.BindPFlag("poller.blocksPerPoll", rootCmd.PersistentFlags().Lookup("poller-blocks-per-poll"))
	viper.BindPFlag("poller.fromBlock", rootCmd.PersistentFlags().Lookup("poller-from-block"))
	viper.BindPFlag("poller.forceFromBlock", rootCmd.PersistentFlags().Lookup("poller-force-from-block"))
	viper.BindPFlag("poller.untilBlock", rootCmd.PersistentFlags().Lookup("poller-until-block"))
	viper.BindPFlag("poller.parallelPollers", rootCmd.PersistentFlags().Lookup("poller-parallel-pollers"))
	viper.BindPFlag("poller.s3.endpoint", rootCmd.PersistentFlags().Lookup("poller-s3-endpoint"))
	viper.BindPFlag("poller.s3.accessKeyId", rootCmd.PersistentFlags().Lookup("poller-s3-accessKeyId"))
	viper.BindPFlag("poller.s3.secretAccessKey", rootCmd.PersistentFlags().Lookup("poller-s3-secretAccessKey"))
	viper.BindPFlag("poller.s3.bucket", rootCmd.PersistentFlags().Lookup("poller-s3-bucket"))
	viper.BindPFlag("poller.s3.region", rootCmd.PersistentFlags().Lookup("poller-s3-region"))
	viper.BindPFlag("poller.s3.prefix", rootCmd.PersistentFlags().Lookup("poller-s3-prefix"))
	viper.BindPFlag("poller.s3.cacheDir", rootCmd.PersistentFlags().Lookup("poller-s3-cacheDir"))
	viper.BindPFlag("poller.s3.metadataTTL", rootCmd.PersistentFlags().Lookup("poller-s3-metadataTTL"))
	viper.BindPFlag("poller.s3.fileCacheTTL", rootCmd.PersistentFlags().Lookup("poller-s3-fileCacheTTL"))
	viper.BindPFlag("poller.s3.maxCacheSize", rootCmd.PersistentFlags().Lookup("poller-s3-maxCacheSize"))
	viper.BindPFlag("poller.s3.cleanupInterval", rootCmd.PersistentFlags().Lookup("poller-s3-cleanupInterval"))
	viper.BindPFlag("poller.s3.maxConcurrentDownloads", rootCmd.PersistentFlags().Lookup("poller-s3-maxConcurrentDownloads"))
	viper.BindPFlag("committer.enabled", rootCmd.PersistentFlags().Lookup("committer-enabled"))
	viper.BindPFlag("committer.blocksPerCommit", rootCmd.PersistentFlags().Lookup("committer-blocks-per-commit"))
	viper.BindPFlag("committer.interval", rootCmd.PersistentFlags().Lookup("committer-interval"))
	viper.BindPFlag("committer.fromBlock", rootCmd.PersistentFlags().Lookup("committer-from-block"))
	viper.BindPFlag("reorgHandler.enabled", rootCmd.PersistentFlags().Lookup("reorgHandler-enabled"))
	viper.BindPFlag("reorgHandler.interval", rootCmd.PersistentFlags().Lookup("reorgHandler-interval"))
	viper.BindPFlag("reorgHandler.blocksPerScan", rootCmd.PersistentFlags().Lookup("reorgHandler-blocks-per-scan"))
	viper.BindPFlag("reorgHandler.fromBlock", rootCmd.PersistentFlags().Lookup("reorgHandler-from-block"))
	viper.BindPFlag("reorgHandler.forceFromBlock", rootCmd.PersistentFlags().Lookup("reorgHandler-force-from-block"))
	viper.BindPFlag("failureRecoverer.enabled", rootCmd.PersistentFlags().Lookup("failure-recoverer-enabled"))
	viper.BindPFlag("failureRecoverer.blocksPerRun", rootCmd.PersistentFlags().Lookup("failure-recoverer-blocks-per-run"))
	viper.BindPFlag("failureRecoverer.interval", rootCmd.PersistentFlags().Lookup("failure-recoverer-interval"))
	viper.BindPFlag("storage.staging.clickhouse.database", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-database"))
	viper.BindPFlag("storage.staging.clickhouse.host", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-host"))
	viper.BindPFlag("storage.staging.clickhouse.port", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-port"))
	viper.BindPFlag("storage.staging.clickhouse.username", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-username"))
	viper.BindPFlag("storage.staging.clickhouse.password", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-password"))
	viper.BindPFlag("storage.staging.clickhouse.asyncInsert", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-asyncInsert"))
	viper.BindPFlag("storage.staging.clickhouse.maxRowsPerInsert", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-maxRowsPerInsert"))
	viper.BindPFlag("storage.staging.clickhouse.maxOpenConns", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-maxOpenConns"))
	viper.BindPFlag("storage.staging.clickhouse.maxIdleConns", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-maxIdleConns"))
	viper.BindPFlag("storage.staging.clickhouse.disableTLS", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-disableTLS"))
	viper.BindPFlag("storage.staging.clickhouse.enableParallelViewProcessing", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-enableParallelViewProcessing"))
	viper.BindPFlag("storage.staging.clickhouse.enableCompression", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-enableCompression"))
	viper.BindPFlag("storage.staging.clickhouse.maxQueryTime", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-maxQueryTime"))
	viper.BindPFlag("storage.staging.clickhouse.maxMemoryUsage", rootCmd.PersistentFlags().Lookup("storage-staging-clickhouse-maxMemoryUsage"))
	viper.BindPFlag("storage.main.clickhouse.database", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-database"))
	viper.BindPFlag("storage.main.clickhouse.host", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-host"))
	viper.BindPFlag("storage.main.clickhouse.port", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-port"))
	viper.BindPFlag("storage.main.clickhouse.username", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-username"))
	viper.BindPFlag("storage.main.clickhouse.password", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-password"))
	viper.BindPFlag("storage.main.clickhouse.asyncInsert", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-asyncInsert"))
	viper.BindPFlag("storage.main.clickhouse.maxRowsPerInsert", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-maxRowsPerInsert"))
	viper.BindPFlag("storage.main.clickhouse.maxOpenConns", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-maxOpenConns"))
	viper.BindPFlag("storage.main.clickhouse.maxIdleConns", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-maxIdleConns"))
	viper.BindPFlag("storage.main.clickhouse.disableTLS", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-disableTLS"))
	viper.BindPFlag("storage.main.clickhouse.enableParallelViewProcessing", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-enableParallelViewProcessing"))
	viper.BindPFlag("storage.main.clickhouse.enableCompression", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-enableCompression"))
	viper.BindPFlag("storage.main.clickhouse.maxQueryTime", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-maxQueryTime"))
	viper.BindPFlag("storage.main.clickhouse.maxMemoryUsage", rootCmd.PersistentFlags().Lookup("storage-main-clickhouse-maxMemoryUsage"))
	viper.BindPFlag("storage.orchestrator.clickhouse.database", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-database"))
	viper.BindPFlag("storage.orchestrator.clickhouse.host", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-host"))
	viper.BindPFlag("storage.orchestrator.clickhouse.port", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-port"))
	viper.BindPFlag("storage.orchestrator.clickhouse.username", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-username"))
	viper.BindPFlag("storage.orchestrator.clickhouse.password", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-password"))
	viper.BindPFlag("storage.orchestrator.clickhouse.asyncInsert", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-asyncInsert"))
	viper.BindPFlag("storage.orchestrator.clickhouse.maxRowsPerInsert", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-maxRowsPerInsert"))
	viper.BindPFlag("storage.orchestrator.clickhouse.maxOpenConns", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-maxOpenConns"))
	viper.BindPFlag("storage.orchestrator.clickhouse.maxIdleConns", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-maxIdleConns"))
	viper.BindPFlag("storage.orchestrator.clickhouse.disableTLS", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-disableTLS"))
	viper.BindPFlag("storage.orchestrator.clickhouse.enableParallelViewProcessing", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-enableParallelViewProcessing"))
	viper.BindPFlag("storage.orchestrator.clickhouse.enableCompression", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-enableCompression"))
	viper.BindPFlag("storage.orchestrator.clickhouse.maxQueryTime", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-maxQueryTime"))
	viper.BindPFlag("storage.orchestrator.clickhouse.maxMemoryUsage", rootCmd.PersistentFlags().Lookup("storage-orchestrator-clickhouse-maxMemoryUsage"))
	viper.BindPFlag("storage.orchestrator.postgres.host", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-host"))
	viper.BindPFlag("storage.orchestrator.postgres.port", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-port"))
	viper.BindPFlag("storage.orchestrator.postgres.username", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-username"))
	viper.BindPFlag("storage.orchestrator.postgres.password", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-password"))
	viper.BindPFlag("storage.orchestrator.postgres.database", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-database"))
	viper.BindPFlag("storage.orchestrator.postgres.sslMode", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-sslMode"))
	viper.BindPFlag("storage.orchestrator.postgres.maxOpenConns", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-maxOpenConns"))
	viper.BindPFlag("storage.orchestrator.postgres.maxIdleConns", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-maxIdleConns"))
	viper.BindPFlag("storage.orchestrator.postgres.maxConnLifetime", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-maxConnLifetime"))
	viper.BindPFlag("storage.orchestrator.postgres.connectTimeout", rootCmd.PersistentFlags().Lookup("storage-orchestrator-postgres-connectTimeout"))
	viper.BindPFlag("storage.orchestrator.redis.host", rootCmd.PersistentFlags().Lookup("storage-orchestrator-redis-host"))
	viper.BindPFlag("storage.orchestrator.redis.port", rootCmd.PersistentFlags().Lookup("storage-orchestrator-redis-port"))
	viper.BindPFlag("storage.orchestrator.redis.password", rootCmd.PersistentFlags().Lookup("storage-orchestrator-redis-password"))
	viper.BindPFlag("storage.orchestrator.redis.db", rootCmd.PersistentFlags().Lookup("storage-orchestrator-redis-db"))
	viper.BindPFlag("storage.orchestrator.redis.enableTLS", rootCmd.PersistentFlags().Lookup("storage-orchestrator-redis-enableTLS"))
	viper.BindPFlag("storage.orchestrator.badger.path", rootCmd.PersistentFlags().Lookup("storage-orchestrator-badger-path"))
	viper.BindPFlag("storage.orchestrator.type", rootCmd.PersistentFlags().Lookup("storage-orchestrator-type"))
	viper.BindPFlag("storage.staging.postgres.host", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-host"))
	viper.BindPFlag("storage.staging.postgres.port", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-port"))
	viper.BindPFlag("storage.staging.postgres.username", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-username"))
	viper.BindPFlag("storage.staging.postgres.password", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-password"))
	viper.BindPFlag("storage.staging.postgres.database", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-database"))
	viper.BindPFlag("storage.staging.postgres.sslMode", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-sslMode"))
	viper.BindPFlag("storage.staging.postgres.maxOpenConns", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-maxOpenConns"))
	viper.BindPFlag("storage.staging.postgres.maxIdleConns", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-maxIdleConns"))
	viper.BindPFlag("storage.staging.postgres.maxConnLifetime", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-maxConnLifetime"))
	viper.BindPFlag("storage.staging.postgres.connectTimeout", rootCmd.PersistentFlags().Lookup("storage-staging-postgres-connectTimeout"))
	viper.BindPFlag("storage.staging.badger.path", rootCmd.PersistentFlags().Lookup("storage-staging-badger-path"))
	viper.BindPFlag("storage.staging.type", rootCmd.PersistentFlags().Lookup("storage-staging-type"))
	viper.BindPFlag("storage.main.kafka.brokers", rootCmd.PersistentFlags().Lookup("storage-main-kafka-brokers"))
	viper.BindPFlag("storage.main.kafka.username", rootCmd.PersistentFlags().Lookup("storage-main-kafka-username"))
	viper.BindPFlag("storage.main.kafka.password", rootCmd.PersistentFlags().Lookup("storage-main-kafka-password"))
	viper.BindPFlag("storage.main.kafka.enableTLS", rootCmd.PersistentFlags().Lookup("storage-main-kafka-enable-tls"))
	viper.BindPFlag("storage.main.type", rootCmd.PersistentFlags().Lookup("storage-main-type"))
	viper.BindPFlag("storage.main.s3.bucket", rootCmd.PersistentFlags().Lookup("storage-main-s3-bucket"))
	viper.BindPFlag("storage.main.s3.region", rootCmd.PersistentFlags().Lookup("storage-main-s3-region"))
	viper.BindPFlag("storage.main.s3.prefix", rootCmd.PersistentFlags().Lookup("storage-main-s3-prefix"))
	viper.BindPFlag("storage.main.s3.accessKeyId", rootCmd.PersistentFlags().Lookup("storage-main-s3-accessKeyId"))
	viper.BindPFlag("storage.main.s3.secretAccessKey", rootCmd.PersistentFlags().Lookup("storage-main-s3-secretAccessKey"))
	viper.BindPFlag("storage.main.s3.endpoint", rootCmd.PersistentFlags().Lookup("storage-main-s3-endpoint"))
	viper.BindPFlag("storage.main.s3.format", rootCmd.PersistentFlags().Lookup("storage-main-s3-format"))
	viper.BindPFlag("storage.main.s3.bufferSizeMB", rootCmd.PersistentFlags().Lookup("storage-main-s3-bufferSizeMB"))
	viper.BindPFlag("storage.main.s3.bufferTimeoutSeconds", rootCmd.PersistentFlags().Lookup("storage-main-s3-bufferTimeoutSeconds"))
	viper.BindPFlag("storage.main.s3.maxBlocksPerFile", rootCmd.PersistentFlags().Lookup("storage-main-s3-maxBlocksPerFile"))
	viper.BindPFlag("storage.main.s3.parquet.compression", rootCmd.PersistentFlags().Lookup("storage-main-s3-parquet-compression"))
	viper.BindPFlag("storage.main.s3.parquet.rowGroupSize", rootCmd.PersistentFlags().Lookup("storage-main-s3-parquet-rowGroupSize"))
	viper.BindPFlag("storage.main.s3.parquet.pageSize", rootCmd.PersistentFlags().Lookup("storage-main-s3-parquet-pageSize"))
	viper.BindPFlag("api.host", rootCmd.PersistentFlags().Lookup("api-host"))
	viper.BindPFlag("api.basicAuth.username", rootCmd.PersistentFlags().Lookup("api-basicAuth-username"))
	viper.BindPFlag("api.basicAuth.password", rootCmd.PersistentFlags().Lookup("api-basicAuth-password"))
	viper.BindPFlag("api.thirdweb.clientId", rootCmd.PersistentFlags().Lookup("api-thirdweb-clientId"))
	viper.BindPFlag("api.contractApiRequest.maxIdleConns", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-maxIdleConns"))
	viper.BindPFlag("api.contractApiRequest.maxIdleConnsPerHost", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-maxIdleConnsPerHost"))
	viper.BindPFlag("api.contractApiRequest.maxConnsPerHost", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-maxConnsPerHost"))
	viper.BindPFlag("api.contractApiRequest.idleConnTimeout", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-idleConnTimeout"))
	viper.BindPFlag("api.contractApiRequest.disableCompression", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-disableCompression"))
	viper.BindPFlag("api.contractApiRequest.timeout", rootCmd.PersistentFlags().Lookup("api-contractApiRequest-timeout"))
	viper.BindPFlag("publisher.enabled", rootCmd.PersistentFlags().Lookup("publisher-enabled"))
	viper.BindPFlag("publisher.mode", rootCmd.PersistentFlags().Lookup("publisher-mode"))
	viper.BindPFlag("publisher.brokers", rootCmd.PersistentFlags().Lookup("publisher-brokers"))
	viper.BindPFlag("publisher.username", rootCmd.PersistentFlags().Lookup("publisher-username"))
	viper.BindPFlag("publisher.password", rootCmd.PersistentFlags().Lookup("publisher-password"))
	viper.BindPFlag("publisher.enableTLS", rootCmd.PersistentFlags().Lookup("publisher-enable-tls"))
	viper.BindPFlag("publisher.blocks.enabled", rootCmd.PersistentFlags().Lookup("publisher-blocks-enabled"))
	viper.BindPFlag("publisher.blocks.topicName", rootCmd.PersistentFlags().Lookup("publisher-blocks-topicName"))
	viper.BindPFlag("publisher.transactions.enabled", rootCmd.PersistentFlags().Lookup("publisher-transactions-enabled"))
	viper.BindPFlag("publisher.transactions.topicName", rootCmd.PersistentFlags().Lookup("publisher-transactions-topicName"))
	viper.BindPFlag("publisher.transactions.toFilter", rootCmd.PersistentFlags().Lookup("publisher-transactions-toFilter"))
	viper.BindPFlag("publisher.transactions.fromFilter", rootCmd.PersistentFlags().Lookup("publisher-transactions-fromFilter"))
	viper.BindPFlag("publisher.traces.enabled", rootCmd.PersistentFlags().Lookup("publisher-traces-enabled"))
	viper.BindPFlag("publisher.traces.topicName", rootCmd.PersistentFlags().Lookup("publisher-traces-topicName"))
	viper.BindPFlag("publisher.events.enabled", rootCmd.PersistentFlags().Lookup("publisher-events-enabled"))
	viper.BindPFlag("publisher.events.topicName", rootCmd.PersistentFlags().Lookup("publisher-events-topicName"))
	viper.BindPFlag("publisher.events.addressFilter", rootCmd.PersistentFlags().Lookup("publisher-events-addressFilter"))
	viper.BindPFlag("publisher.events.topic0Filter", rootCmd.PersistentFlags().Lookup("publisher-events-topic0Filter"))
	viper.BindPFlag("workMode.checkIntervalMinutes", rootCmd.PersistentFlags().Lookup("workMode-checkIntervalMinutes"))
	viper.BindPFlag("workMode.liveModeThreshold", rootCmd.PersistentFlags().Lookup("workMode-liveModeThreshold"))
	viper.BindPFlag("validation.mode", rootCmd.PersistentFlags().Lookup("validation-mode"))
	// Migrator viper bindings
	viper.BindPFlag("migrator.destination.type", rootCmd.PersistentFlags().Lookup("migrator-destination-type"))
	viper.BindPFlag("migrator.destination.clickhouse.host", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-host"))
	viper.BindPFlag("migrator.destination.clickhouse.port", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-port"))
	viper.BindPFlag("migrator.destination.clickhouse.username", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-username"))
	viper.BindPFlag("migrator.destination.clickhouse.password", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-password"))
	viper.BindPFlag("migrator.destination.clickhouse.database", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-database"))
	viper.BindPFlag("migrator.destination.clickhouse.disableTLS", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-disableTLS"))
	viper.BindPFlag("migrator.destination.clickhouse.asyncInsert", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-asyncInsert"))
	viper.BindPFlag("migrator.destination.clickhouse.maxRowsPerInsert", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-maxRowsPerInsert"))
	viper.BindPFlag("migrator.destination.clickhouse.maxOpenConns", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-maxOpenConns"))
	viper.BindPFlag("migrator.destination.clickhouse.maxIdleConns", rootCmd.PersistentFlags().Lookup("migrator-destination-clickhouse-maxIdleConns"))
	viper.BindPFlag("migrator.destination.postgres.host", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-host"))
	viper.BindPFlag("migrator.destination.postgres.port", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-port"))
	viper.BindPFlag("migrator.destination.postgres.username", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-username"))
	viper.BindPFlag("migrator.destination.postgres.password", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-password"))
	viper.BindPFlag("migrator.destination.postgres.database", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-database"))
	viper.BindPFlag("migrator.destination.postgres.sslMode", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-sslMode"))
	viper.BindPFlag("migrator.destination.postgres.maxOpenConns", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-maxOpenConns"))
	viper.BindPFlag("migrator.destination.postgres.maxIdleConns", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-maxIdleConns"))
	viper.BindPFlag("migrator.destination.postgres.maxConnLifetime", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-maxConnLifetime"))
	viper.BindPFlag("migrator.destination.postgres.connectTimeout", rootCmd.PersistentFlags().Lookup("migrator-destination-postgres-connectTimeout"))
	viper.BindPFlag("migrator.destination.kafka.brokers", rootCmd.PersistentFlags().Lookup("migrator-destination-kafka-brokers"))
	viper.BindPFlag("migrator.destination.kafka.username", rootCmd.PersistentFlags().Lookup("migrator-destination-kafka-username"))
	viper.BindPFlag("migrator.destination.kafka.password", rootCmd.PersistentFlags().Lookup("migrator-destination-kafka-password"))
	viper.BindPFlag("migrator.destination.kafka.enableTLS", rootCmd.PersistentFlags().Lookup("migrator-destination-kafka-enableTLS"))
	viper.BindPFlag("migrator.destination.badger.path", rootCmd.PersistentFlags().Lookup("migrator-destination-badger-path"))
	viper.BindPFlag("migrator.destination.s3.bucket", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-bucket"))
	viper.BindPFlag("migrator.destination.s3.region", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-region"))
	viper.BindPFlag("migrator.destination.s3.prefix", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-prefix"))
	viper.BindPFlag("migrator.destination.s3.accessKeyId", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-accessKeyId"))
	viper.BindPFlag("migrator.destination.s3.secretAccessKey", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-secretAccessKey"))
	viper.BindPFlag("migrator.destination.s3.endpoint", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-endpoint"))
	viper.BindPFlag("migrator.destination.s3.format", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-format"))
	viper.BindPFlag("migrator.destination.s3.bufferSizeMB", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-bufferSizeMB"))
	viper.BindPFlag("migrator.destination.s3.bufferTimeoutSeconds", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-bufferTimeoutSeconds"))
	viper.BindPFlag("migrator.destination.s3.maxBlocksPerFile", rootCmd.PersistentFlags().Lookup("migrator-destination-s3-maxBlocksPerFile"))
	viper.BindPFlag("migrator.startBlock", rootCmd.PersistentFlags().Lookup("migrator-startBlock"))
	viper.BindPFlag("migrator.endBlock", rootCmd.PersistentFlags().Lookup("migrator-endBlock"))
	viper.BindPFlag("migrator.batchSize", rootCmd.PersistentFlags().Lookup("migrator-batchSize"))
	viper.BindPFlag("migrator.workerCount", rootCmd.PersistentFlags().Lookup("migrator-workerCount"))

	rootCmd.AddCommand(orchestratorCmd)
	rootCmd.AddCommand(apiCmd)
	rootCmd.AddCommand(validateAndFixCmd)
	rootCmd.AddCommand(validateCmd)
	rootCmd.AddCommand(migrateValidationCmd)
}

func initConfig() {
	configs.LoadConfig(cfgFile)
	customLogger.InitLogger()
}
